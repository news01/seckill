#
#DELIMITER // 
#
#-- ROW_COUNT(): 0:未修改数据；>0 表示修改的行数； <0:sql错误/未执行
#
#
#CREATE PROCEDURE seckill.execute_seckill (
#	IN v_seckill_id BIGINT,
#	IN v_phone BIGINT,
#	IN v_kill_time TIMESTAMP,
#	OUT r_result INT
#)
#BEGIN
#	DECLARE insert_count INT DEFAULT 0 ; 
#	START TRANSACTION; 
#	INSERT IGNORE INTO success_killed (
#	seckill_id,
#	user_phone,
#	create_time
#	)
#	VALUES
#		(
#			v_seckill_id,
#			v_phone,
#			v_kill_time
#		);
# SELECT row_count() INTO insert_count ;
#	IF (insert_count = 0) THEN
#		ROLLBACK ;
#		SET r_result = - 1 ;
#	ELSEIF (insert_count < 0) THEN
#		ROLLBACK ;
#		SET r_result = - 2 ;
#	ELSE
#		UPDATE seckill
#		SET number = number - 1
#		WHERE
#			seckill_id = v_seckill_id
#		AND end_time > v_kill_time
#		AND start_time < v_kill_time
#		AND number > 0 ; 
#		SELECT ROW_COUNT() INTO insert_count ;
#		IF (insert_count = 0) THEN
#			ROLLBACK ;
#			SET r_result = 0 ;
#		ELSEIF (insert_count < 0) THEN
#			ROLLBACK ;
#			SET r_result = - 2 ;
#		ELSE
#			COMMIT ;
#			SET r_result = 1 ;
#		END IF ;
#	END
#	IF;
#	END
#//
#
#DROP PROCEDURE seckill.execute_seckill
#
#
#
#
#
#
#
#
#
#
#
#SET @result = -3;
#
#SELECT @result
#SELECT NOW()
#SHOW CREATE PROCEDURE seckill.execute_seckill 
#
#CALL seckill.execute_seckill (
#	103,
#	13929266764,
#	NOW(),
#	@result
#)
#
#	INSERT IGNORE INTO success_killed (
#	seckill_id,
#	user_phone,
#	create_time
#	)
#	VALUES
#		(
#			104,
#			13929266764,
#			NOW()
#		) ;
#
#UPDATE success_killed SET success_killed.user_phone = 18790364787 WHERE success_killed.seckill_id=103
#
#SELECT ROW_COUNT() 
